// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/google/wire"
	"github.com/haandol/devops-academy-eda-demo/pkg/adapter/primary/consumer"
	"github.com/haandol/devops-academy-eda-demo/pkg/adapter/primary/router"
	producer2 "github.com/haandol/devops-academy-eda-demo/pkg/adapter/secondary/producer"
	"github.com/haandol/devops-academy-eda-demo/pkg/adapter/secondary/repository"
	"github.com/haandol/devops-academy-eda-demo/pkg/config"
	"github.com/haandol/devops-academy-eda-demo/pkg/connector/cloud"
	"github.com/haandol/devops-academy-eda-demo/pkg/connector/producer"
	"github.com/haandol/devops-academy-eda-demo/pkg/port"
	"github.com/haandol/devops-academy-eda-demo/pkg/port/primaryport/routerport"
	"github.com/haandol/devops-academy-eda-demo/pkg/service"
	"net/http"
)

// Injectors from wire.go:

func InitTripApp(cfg *config.Config) port.App {
	ginRouter := router.NewGinRouter(cfg)
	server := router.NewServerForce(cfg, ginRouter)
	kafkaProducer := provideProducer(cfg)
	tripProducer := provideTripProducer(cfg, kafkaProducer)
	client := provideDbClient(cfg)
	tripRepository := repository.NewTripRepository(client)
	tripService := service.NewTripService(tripProducer, tripRepository)
	tripRouter := router.NewTripRouter(tripService)
	tripConsumer := provideTripConsumer(cfg, tripService)
	tripApp := NewTripApp(server, ginRouter, tripRouter, tripConsumer)
	return tripApp
}

func InitCarApp(cfg *config.Config) port.App {
	ginRouter := router.NewGinRouter(cfg)
	server := router.NewServer(cfg, ginRouter)
	kafkaProducer := provideProducer(cfg)
	carProducer := provideCarProducer(cfg, kafkaProducer)
	client := provideDbClient(cfg)
	carRepository := repository.NewCarRepository(client)
	carService := service.NewCarService(carProducer, carRepository)
	carConsumer := provideCarConsumer(cfg, carService)
	carApp := NewCarApp(server, carConsumer)
	return carApp
}

func InitHotelApp(cfg *config.Config) port.App {
	ginRouter := router.NewGinRouter(cfg)
	server := router.NewServer(cfg, ginRouter)
	kafkaProducer := provideProducer(cfg)
	hotelProducer := provideHotelProducer(cfg, kafkaProducer)
	client := provideDbClient(cfg)
	hotelRepository := repository.NewHotelRepository(client)
	hotelService := service.NewHotelService(hotelProducer, hotelRepository)
	hotelConsumer := provideHotelConsumer(cfg, hotelService)
	hotelApp := NewHotelApp(server, hotelConsumer)
	return hotelApp
}

func InitFlightApp(cfg *config.Config) port.App {
	ginRouter := router.NewGinRouter(cfg)
	server := router.NewServer(cfg, ginRouter)
	kafkaProducer := provideProducer(cfg)
	flightProducer := provideFlightProducer(cfg, kafkaProducer)
	client := provideDbClient(cfg)
	flightRepository := repository.NewFlightRepository(client)
	flightService := service.NewFlightService(flightProducer, flightRepository)
	flightConsumer := provideFlightConsumer(cfg, flightService)
	flightApp := NewFlightApp(server, flightConsumer)
	return flightApp
}

// wire.go:

// Common
func provideDbClient(cfg *config.Config) *dynamodb.Client {
	awsCfg, err := cloud.GetAWSConfig()
	if err != nil {
		panic(err)
	}

	return dynamodb.NewFromConfig(awsCfg.Cfg)
}

func provideProducer(cfg *config.Config) *producer.KafkaProducer {
	kafkaProducer, err := producer.Connect(&cfg.Kafka)
	if err != nil {
		panic(err)
	}
	return kafkaProducer
}

// TripApp
func provideTripProducer(
	cfg *config.Config,
	kafkaProducer *producer.KafkaProducer,
) *producer2.TripProducer {
	return producer2.NewTripProducer(kafkaProducer)
}

func provideTripConsumer(
	cfg *config.Config,
	tripService *service.TripService,
) *consumer.TripConsumer {
	kafkaConsumer := consumer.NewKafkaConsumer(&cfg.Kafka, "trip", "trip-service")
	return consumer.NewTripConsumer(kafkaConsumer, tripService)
}

var provideTripRouters = wire.NewSet(router.NewGinRouter, wire.Bind(new(http.Handler), new(*router.GinRouter)), router.NewServerForce, wire.Bind(new(routerport.RouterGroup), new(*router.GinRouter)), router.NewTripRouter)

var provideRouters = wire.NewSet(router.NewGinRouter, wire.Bind(new(http.Handler), new(*router.GinRouter)), router.NewServer, wire.Bind(new(routerport.RouterGroup), new(*router.GinRouter)))

// CarApp
func provideCarProducer(
	cfg *config.Config,
	kafkaProducer *producer.KafkaProducer,
) *producer2.CarProducer {
	return producer2.NewCarProducer(kafkaProducer)
}

func provideCarConsumer(
	cfg *config.Config,
	carService *service.CarService,
) *consumer.CarConsumer {
	kafkaConsumer := consumer.NewKafkaConsumer(&cfg.Kafka, "car", "car-service")
	return consumer.NewCarConsumer(kafkaConsumer, carService)
}

// HotelApp
func provideHotelProducer(
	cfg *config.Config,
	kafkaProducer *producer.KafkaProducer,
) *producer2.HotelProducer {
	return producer2.NewHotelProducer(kafkaProducer)
}

func provideHotelConsumer(
	cfg *config.Config,
	hotelService *service.HotelService,
) *consumer.HotelConsumer {
	kafkaConsumer := consumer.NewKafkaConsumer(&cfg.Kafka, "hotel", "hotel-service")
	return consumer.NewHotelConsumer(kafkaConsumer, hotelService)
}

// FlightApp
func provideFlightProducer(
	cfg *config.Config,
	kafkaProducer *producer.KafkaProducer,
) *producer2.FlightProducer {
	return producer2.NewFlightProducer(kafkaProducer)
}

func provideFlightConsumer(
	cfg *config.Config,
	flightService *service.FlightService,
) *consumer.FlightConsumer {
	kafkaConsumer := consumer.NewKafkaConsumer(&cfg.Kafka, "flight", "flight-service")
	return consumer.NewFlightConsumer(kafkaConsumer, flightService)
}
